{"name":"Protege","body":"**Protege is a versatile NodeJS extension library that aims to make code as simple as possible**\r\n\r\n## Installation\r\n\r\nTo install Protege, use [npm](http://github.com/isaacs/npm):\r\n\r\n        $ npm install protege\r\n\r\n## Usage\r\n\r\n```require('protege')``` - it's that easy\r\n\r\n### Global\r\n```\r\ndelay(time, fn) - Coffeescript friendly alias for setTimeout\r\n```\r\n    \r\n### Object\r\n####These apply to all types, some are Object specific though\r\n```\r\n.clone() - Duplicates the object into a new reference\r\n.clear() - Removes all keys and values from the objects\r\n.concat(source) - Adds all properties/values from source to object.\r\n        (optional) overwrite = true will overwrite existing values with source values\r\n.merge(source, overwrite, deep) - Merge source properties/values into object.\r\n        (optional) overwrite = true will overwrite existing values with source values\r\n        (optional) deep = true will initiate a deep merge, merging descriptors and non-enumerable properties\r\n\r\n.extend(source) - Alias for merge\r\n.unique(merge) - Returns a unique copy of the object. (optional) merge will merge values for duplicate keys into arrays instead of removing them\r\n\r\nObject.isEmpty(object) - Returns true if object is empty\r\nObject.isObject(object) - Returns true if object is an object\r\nObject.isArray(object) - Returns true if object is an array\r\nObject.isElement(object) - Returns true if object is a DOM element\r\nObject.isBoolean(object) - Returns true if object is a boolean\r\nObject.isNumber(object) - Returns true if object is a number\r\nObject.isString(object) - Returns true if object is a string\r\nObject.isFunction(object) - Returns true if object is a function\r\nObject.isXML(object) - Returns true if object is an XML object\r\n\r\n.keys() - Returns all keys in the object\r\n.values() - Returns all values in the object\r\n\r\n.getKey() - Returns first key in object\r\n.getValue() - Returns first value in object\r\n.getKeys(value) - Returns all keys for the corresponding value\r\n.getValues(key) - Returns all values for the corresponding key\r\n\r\n.remove(key) - Removes key from object\r\n\r\n.stringify() - Returns JSON string for object\r\n.prettify() - Returns a human readable JSON string for object\r\n```\r\n\r\n### Array\r\n####These also apply to String (since String is just an array after all) but some are only really useful for true arrays\r\n```\r\n.clone() - Duplicates the array into a new reference.\r\n\r\n.merge(arr) - Adds array arr to array\r\n.unique() - Returns a copy of the array with duplicates removed\r\n.flatten() - Returns a one-dimensional copy of the array\r\n.compact() - Returns a copy of the array with all undefined and null items removed\r\n.intersect(arr) - Returns an array of all items in both arr and the array\r\n\r\n.size() - Returns size of array\r\n.first() - Returns first value or array or undefined\r\n.last() - Returns last value or array or undefined\r\n\r\n.replace(value, newval) - Replaces first instance of value with newval\r\n.replaceIndex(index, value) - Replaces item at index with value\r\n.replaceAll(value, newval) - Replaces all instances of value with newval\r\n.remove(value) - Removes first instance of value from array\r\n.removeAll(value) - Removes all instances of value from array.\r\n.removeAllIgnoreCase(value) - Removes all instances of value from array ignoring case\r\n.removeIndex(idx) - Removes index of idx from array\r\n```\r\n\r\n### String\r\n```\r\n.upcase() - Alias for toUpperCase(), inspired by Ruby syntax\r\n.downcase() - Alias for toLowerCase(), inspired by Ruby syntax\r\n\r\n.strip() - Alias for trim(), inspired by Ruby syntax\r\n.rstrip() - Alias for trimRight(), inspired by Ruby syntax\r\n.lstrip() - Alias for trimLeft(), inspired by Ruby syntax\r\n\r\n.replaceAll(value, newval) - Replaces all instances of value with newval\r\n\r\n.startsWith(value) - Returns true if string starts with value, inspired by Java syntax\r\n.endsWith(value) - Returns true if string ends with value, inspired by Java syntax\r\n.startsWithIgnoreCase(value) - Returns true if string starts with value ignoring case, inspired by Java syntax\r\n.endsWithIgnoreCase(value) - Returns true if string ends with value ignoring case, inspired by Java syntax\r\n\r\n.contains(value) - Returns true if the string contains value, inspired by Java syntax\r\n.containsIgnoreCase(value) - Returns true if the string contains value ignoring case, inspired by Java syntax\r\n.equalsIgnoreCase(value) - Returns true if the string equals value ignoring case, inspired by Java syntax\r\n```\r\n\r\n### Function\r\n```\r\n.memoize() - Caches result for parameters so any future calls will skip execution and return previous result\r\n        Example: var cacheFunc = myFunc.memoize(); cacheFunc(15); cacheFunc(13); cacheFunc(15);\r\n        Only the first two calls will actually be executed.\r\n```\r\n## Examples\r\n\r\nYou can view further examples in the [example folder.](https://github.com/wearefractal/protege/tree/master/examples)","tagline":"Protege is a NodeJS extension library","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}